<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
      http://www.springframework.org/schema/tx
           http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
    http://www.springframework.org/schema/beans        
    http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
    http://www.springframework.org/schema/context                
    http://www.springframework.org/schema/context/spring-context-4.0.xsd
    http://www.springframework.org/schema/cache 
     http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
      http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx.xsd">  

	<!-- 自动扫描 自动扫描 将标注Spring注解的类自动转化Bean --> 
	<context:component-scan base-package="com.xu" >
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
	</context:component-scan>
	<context:component-scan base-package="com.quartz">
	</context:component-scan>
	<!-- 引入jdbc属性配置文件 -->
	<context:property-placeholder location="classpath:properties/jdbc.properties" ignore-unresolvable="true"/>
	<!-- 阿里 druid 数据库连接池 -->  
  <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method = "close" >    
       <!-- 数据库基本信息配置 -->  
       <property name = "url" value = "${jdbc.url}" />    
       <property name = "username" value = "${jdbc.username}" />    
       <property name = "password" value = "${jdbc.password}" />    
       <property name = "driverClassName" value = "${jdbc.driverClassName}" />    
       <property name = "filters" value = "${jdbc.filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${jdbc.maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${jdbc.initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${jdbc.maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${jdbc.minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${jdbc.timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${jdbc.minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${jdbc.validationQuery}" />    
       <property name = "testWhileIdle" value = "${jdbc.testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${jdbc.testOnBorrow}" />    
       <property name = "testOnReturn" value = "${jdbc.testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${jdbc.maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${jdbc.removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${jdbc.removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${jdbc.logAbandoned}" />  
  </bean>  

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/xu/manager/mapper/*.xml" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xu.manager.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	
	<!--事务管理器类 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean> 

    <!--注解方式实现声明式事务，指定注解方式实现事务-->
    <tx:annotation-driven transaction-manager="txManager"/>

	<import resource="classpath:spring/spring-shiro.xml" />
	<!-- <import resource="classpath:config/ehcacheConfig.xml" /> -->
	<import resource="classpath:spring/spring-hessian.xml" />
    <import resource="classpath:spring/spring-dynamicQuarz.xml" />
	<import resource="classpath:spring/spring-task.xml" /> 
	<import resource="classpath:config/redis-context.xml" />
	<!-- <import resource="classpath:dubbo/helloService.xml" /> -->
	<import resource="classpath:config/redis-Operations.xml" />
	
	
	
	
	
</beans>